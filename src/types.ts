/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type InfoObject =
  | {
      title: string;
      description?: string;
      termsOfService?: string;
      version: string;
      contact?: ContactObject;
      license?: LicenseObject;
    }
  | VendorExtensions;
export type ContactObject =
  | {
      name?: string;
      email?: string;
      url?: string;
    }
  | VendorExtensions;
export type LicenseObject =
  | {
      name?: string;
      url?: string;
    }
  | VendorExtensions;
export type ServerObject = {
  url: string;
  name?: string;
  description?: string;
  summary?: string;
} & VendorExtensions;
export type Servers = ServerObject[];
export type MethodObject = {
  /**
   * The cannonical name for the method. The name MUST be unique within the methods array.
   */
  name: string;
  /**
   * A verbose explanation of the method behavior. GitHub Flavored Markdown syntax MAY be used for rich text representation.
   */
  description?: string;
  /**
   * A short summary of what the method does.
   */
  summary?: string;
  tags?: Tags;
  /**
   * Format the server expects the params. Defaults to 'by-positon'.
   */
  paramStructure?: "by-position" | "by-name";
  params?: (ContentDescriptorObject | ReferenceObject | OneOfObject)[];
  result: ContentDescriptorObject | ReferenceObject | OneOfObject;
  /**
   * Defines an application level error.
   */
  errors?: (ErrorObject | ReferenceObject | OneOfObject)[];
  links?: Links;
  examples?: Examples;
} & VendorExtensions;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export type TagObject = {
  name: string;
  description?: string;
  externalDocs?: ExternalDocumentationObject;
} & VendorExtensions;
export type ExternalDocumentationObject = {
  description?: string;
  url: string;
} & VendorExtensions;
export type Tags = TagObject[];
export type ContentDescriptorObject = {
  name: string;
  description?: string;
  summary?: string;
  schema?: Schema;
  required?: boolean;
} & VendorExtensions;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export type LinkObject =
  | ({
      method?: string;
      description?: string;
      params?: any;
      server?: ServerObject;
    } & VendorExtensions)
  | ReferenceObject;
export type Links = LinkObject[];
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export type ExampleObject = {
  summary?: string;
  value: any;
  description?: string;
  name: string;
  [k: string]: any;
} & VendorExtensions;
export type Examples = ExamplePairingObject[];
export type Methods = MethodObject[];

export interface OpenRPC {
  openrpc: "1.0.0-rc0" | "1.0.0-rc1";
  info: InfoObject;
  servers?: Servers;
  methods: Methods;
  components?: {
    schemas?: {
      [k: string]: Schema;
    };
    links?: {
      [k: string]: LinkObject;
    };
    examples?: {
      [k: string]: ExampleObject;
    };
    examplePairings?: {
      [k: string]: ExamplePairingObject;
    };
    contentDescriptors?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-z]+".
       */
      [k: string]: ContentDescriptorObject | ReferenceObject | OneOfObject;
    };
    tags?: {
      [k: string]: TagObject;
    };
    [k: string]: any;
  };
}
/**
 * Any property starting with x- is valid.
 */
export interface VendorExtensions {
  /**
   * This interface was referenced by `VendorExtensions`'s JSON-Schema definition
   * via the `patternProperty` "^x-".
   */
  [k: string]: {
    [k: string]: any;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export interface Schema {
  [k: string]: any;
}
export interface ReferenceObject {
  $ref: string;
}
export interface OneOfObject {
  oneOf: (ContentDescriptorObject | ReferenceObject | OneOfObject)[];
}
/**
 * Defines an application level error.
 */
export interface ErrorObject {
  /**
   * A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.
   */
  code: number;
  /**
   * A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.
   */
  message: string;
  /**
   * A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
   */
  data?: {
    [k: string]: any;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export interface ExamplePairingObject {
  name?: string;
  description?: string;
  params?: (ExampleObject | ReferenceObject)[];
  result?: ExampleObject | ReferenceObject;
  [k: string]: any;
}
